{"题目": "动态规划进阶ing-三角形最小路径和｜Go主题月", "发布时间": "2021-03-28T14:34:54.000Z", "内容": [{"ctype": "p", "data": "如果你对动态规划不熟悉，望转到该篇 \\color{red}{如果你对动态规划不熟悉，望转到该篇~}如果你对动态规划不熟悉，望转到该篇 "}, {"ctype": "p", "data": "肝了好多天-动态规划十连-超细腻解析｜刷题打卡"}, {"ctype": "p", "data": "这道题很有意思，不看后悔！😄😄😄 \\color{green}{这道题很有意思，不看后悔！😄 😄 😄 ~}这道题很有意思，不看后悔！😄😄😄 "}, {"ctype": "p", "data": "什么题可以选择动态规划来做？"}, {"ctype": "p", "data": "1.计数"}, {"ctype": "p", "data": "2.求最大值最小值"}, {"ctype": "p", "data": "3.求存在性"}, {"ctype": "head", "data": "leecode 120. 三角形最小路径和"}, {"ctype": "p", "data": "给定一个三角形 triangle ，找出自顶向下的最小路径和。"}, {"ctype": "p", "data": "每一步只能移动到下一行中相邻的结点上。相邻的结点 在这里指的是 下标 与 上一层结点下标 相同或者等于 上一层结点下标 + 1 的两个结点。也就是说，如果正位于当前行的下标 i ，那么下一步可以移动到下一行的下标 i 或 i + 1 。"}, {"ctype": "p", "data": " "}, {"ctype": "p", "data": "示例 1："}, {"ctype": "p", "data": "输入：triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n输出：11\n解释：如下面简图所示："}, {"ctype": "img", "data": "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84f0532e035f4cb1940eb21b780121c3~tplv-k3u1fbpfcp-watermark.image"}, {"ctype": "p", "data": "自顶向下的最小路径和为 11（即，2 + 3 + 5 + 1 = 11）。\n示例 2："}, {"ctype": "p", "data": "输入：triangle = [[-10]]\n输出：-10\n "}, {"ctype": "p", "data": "提示："}, {"ctype": "p", "data": "1 <= triangle.length <= 200"}, {"ctype": "p", "data": "triangle[0].length == 1"}, {"ctype": "p", "data": "triangle[i].length == triangle[i - 1].length + 1"}, {"ctype": "p", "data": "-104 <= triangle[i][j] <= 104\n "}, {"ctype": "p", "data": "进阶："}, {"ctype": "p", "data": "你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题吗？"}, {"ctype": "head", "data": ""}, {"ctype": "p", "data": "--"}, {"ctype": "p", "data": "动态规划四步走~~~ ❤️❤️❤️❤️"}, {"ctype": "p", "data": "这道题，老简单了"}, {"ctype": "p", "data": "2.1. 动态规划组成部分1：确定状态"}, {"ctype": "p", "data": "简单的说，解动态规划的时候需要开一个数组，数组的每个元素f[i]或者f[i][j]代表什么，类似数学题中x, y, z代表什么"}, {"ctype": "p", "data": "最后一步"}, {"ctype": "img", "data": "https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84f0532e035f4cb1940eb21b780121c3~tplv-k3u1fbpfcp-watermark.image"}, {"ctype": "p", "data": "我们直接看这个图，只能走相邻节点，最后一步那必然是"}, {"ctype": "p", "data": "从i-1,j-1走过来"}, {"ctype": "p", "data": "从i-1,j走过来"}, {"ctype": "p", "data": "子问题"}, {"ctype": "p", "data": "这子问题还用说吗，用数组将之前走过的最小路径存下来"}, {"ctype": "p", "data": "走向最后一步的前一步"}, {"ctype": "p", "data": "那么我们就可以得到"}, {"ctype": "p", "data": "min(f[i−1][j−1],f[i−1][j])+c[i][j]"}, {"ctype": "p", "data": "除了通过减法，我们也可以通过加法来实现。"}, {"ctype": "p", "data": "c就是当前这个位置上的值。"}, {"ctype": "p", "data": "很nice \\color{yellow}{很nice ~}很nice ❤️❤️❤️"}, {"ctype": "p", "data": "2.2. 动态规划组成部分2：转移方程"}, {"ctype": "p", "data": "没什么说的嘛，如果没看到，建议回到文章开头的链接，先试着看初级一点的动态规划文章"}, {"ctype": "p", "data": "f[i][j]=min(f[i−1][j−1],f[i−1][j])+c[i][j]"}, {"ctype": "p", "data": "2.3. 动态规划组成部分3：初始条件和边界情况"}, {"ctype": "p", "data": "f[0][0]=c[0][0]"}, {"ctype": "p", "data": "j = i : f[i−1][i−1]+c[i][i]"}, {"ctype": "p", "data": "j = 0  : f[i−1][0]+c[i][0"}, {"ctype": "p", "data": "2.4. 动态规划组成部分4：计算顺序"}, {"ctype": "p", "data": "自顶向下"}, {"ctype": "p", "data": "参考代码"}, {"ctype": "p", "data": "GO语言版"}, {"ctype": "code", "data": "func minimumTotal(triangle [][]int) int {\n    n := len(triangle)\n    f := make([][]int, n)\n    for i := 0; i < n; i++ {\n        f[i] = make([]int, n)\n    }\n    f[0][0] = triangle[0][0]\n    for i := 1; i < n; i++ {\n        f[i][0] = f[i - 1][0] + triangle[i][0]\n        for j := 1; j < i; j++ {\n            f[i][j] = min(f[i - 1][j - 1], f[i - 1][j]) + triangle[i][j]\n        }\n        f[i][i] = f[i - 1][i - 1] + triangle[i][i]\n    }\n    ans := math.MaxInt32\n    for i := 0; i < n; i++ {\n        ans = min(ans, f[n-1][i])\n    }\n    return ans\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\n\n\n复制代码"}, {"ctype": "p", "data": "java版"}, {"ctype": "code", "data": "class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        int n = triangle.size();\n        // dp[i][j] 表示从点 (i, j) 到底边的最小路径和。\n        int[][] dp = new int[n + 1][n + 1];\n        // 从三角形的最后一行开始递推。\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle.get(i).get(j);\n            }\n        }\n        return dp[0][0];\n    }\n}\n\n\n复制代码"}, {"ctype": "p", "data": "是不是想的太简单了点？ 别人要求需要On但现在是On2的时间复杂度？ 咋优化呢？"}, {"ctype": "p", "data": "从三角形的最后一行开始递推。"}, {"ctype": "p", "data": "只用到了下一行的 dp[i + 1][j]dp[i+1][j] 和 dp[i + 1][j + 1]dp[i+1][j+1]。"}, {"ctype": "p", "data": "想象一下，我们把最小路径通过一行的方式展现出来"}, {"ctype": "p", "data": "是不是就实现On的时间复杂度呢？"}, {"ctype": "p", "data": "GO版"}, {"ctype": "code", "data": "func minimumTotal(triangle [][]int) int {\n    n := len(triangle)\n    f := make([]int, n+1)\n    for i := n-1; i >= 0; i-- {\n        for j := 0; j <= i; j++ {\n            f[j] = min(f[j], f[j + 1]) + triangle[i][j]\n        }\n    }\n    return f[0]\n}\n\nfunc min(x, y int) int {\n    if x < y {\n        return x\n    }\n    return y\n}\n\n复制代码"}, {"ctype": "p", "data": "JAVA版"}, {"ctype": "code", "data": " \n   class Solution {\n    public int minimumTotal(List<List<Integer>> triangle) {\n        int n = triangle.size();\n        int[] dp = new int[n + 1];\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                dp[j] = Math.min(dp[j], dp[j + 1]) + triangle.get(i).get(j);\n            }\n        }\n        return dp[0];\n    }\n}\n\n\n\n    \n\n复制代码"}, {"ctype": "p", "data": "❤️❤️❤️❤️"}, {"ctype": "p", "data": "非常感谢人才们能看到这里，如果这个文章写得还不错，觉得有点东西的话   求点赞👍 求关注❤️  求分享👥  对帅气欧巴的我来说真的 非常有用！！！"}, {"ctype": "p", "data": "如果本篇博客有任何错误，请批评指教，不胜感激 ！"}], "cate": "后端"}
{"题目": "干掉前端！3分钟纯 Java 注解搭个管理系统，我直接好家伙", "发布时间": "2021-03-26T08:38:25.000Z", "内容": [{"ctype": "p", "data": "大家好，我是小富~"}, {"ctype": "p", "data": "最近接触到个新项目，发现它用了一个比较有意思的框架，可以说实现了我刚入行时候的梦想，所以这里马不停蹄的和大家分享下。"}, {"ctype": "p", "data": "在我刚开始工作接触的项目都还没做前后端分离，经常需要后端来维护页面，有时候觉得自己好像天生不适合干前端，你要是让我研究研究后端的技术，看个中间件源码啊，分析分析什么框架底层原理啊，这都问题不大，偶尔搞一下JS也可以。你要是让我写个css样式，那简直要命了，一点也提不起兴趣，不知道有没有跟我一样的。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/94bff112f60b40c4a0f6cd0ddf352e94~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "今天要介绍的框架直接不用写页面了，话不多说，下边咱们直奔主题"}, {"ctype": "p", "data": "Erupt一个通用后台管理框架，据说有 超低代码量、 零前端代码、零 CURD操作、无需建表，纯Java注解开发等特色，号称三分钟就可以搭建一个完整的后台管理系统。"}, {"ctype": "p", "data": "额~ 听着好像还挺流批的，到底是不是有这么魔幻，咱们一起用起来感受下。"}, {"ctype": "p", "data": "首先来搭建一下环境，目前Erupt支持Java版本1.8.0及以上、Spring Boot版本2.0及其以上。"}, {"ctype": "p", "data": "搭建easy"}, {"ctype": "p", "data": "pom.xml引入必要的jar包"}, {"ctype": "code", "data": "    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n        <!--用户权限管理-->\n        <dependency>\n            <groupId>xyz.erupt</groupId>\n            <artifactId>erupt-upms</artifactId>\n            <version>1.6.7</version>\n        </dependency>\n        <!--接口数据安全-->\n        <dependency>\n            <groupId>xyz.erupt</groupId>\n            <artifactId>erupt-security</artifactId>\n            <version>1.6.7</version>\n        </dependency>\n        <!--后台WEB界面-->\n        <dependency>\n            <groupId>xyz.erupt</groupId>\n            <artifactId>erupt-web</artifactId>\n            <version>1.6.7</version>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-tomcat</artifactId>\n            <scope>compile</scope>\n        </dependency>\n    </dependencies>\n复制代码"}, {"ctype": "p", "data": "application.yml 文件只要简单配置数据源就好，提前准备个数据库，说到数据库这里我说个小插曲。"}, {"ctype": "p", "data": "我之前在Github 提交案例代码的时候（https://github.com/chengxy-nds/Springboot-Notebook ），由于没太注意没屏蔽敏感信息，导致云数据库账号泄露了，最近我发现已经有小伙伴在数据库上跑项目了，仔细看了看里边的数据结构，发现像是个毕设项目。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2b91758992344edc914eb9368e89e981~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "本身这个库就是我跑demo案例的一个测试库，为的就是让小伙伴能把更多时间放在研究案例的技术点上，减少搭建环境这种没技术含量的琐碎事。"}, {"ctype": "p", "data": "发现归发现，这里我没改密码，也没删他们的库，如果你要用就继续用着，但玩归玩，闹归闹，你不能乱动不是你的数据！影响其他人学习就不好了。"}, {"ctype": "code", "data": "spring:\n  datasource:\n    url: jdbc:mysql://47.93.6.5:3306/erupt2?useUnicode=true&characterEncoding=UTF-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n  jpa:\n    show-sql: true\n    generate-ddl: true\n    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect\n    database: mysql\n  profiles:\n    active: dev\n  mail:\n    username: xxxx@qq.com\n    password: xxxxxxx\n    host: smtp.qq.com\n    properties:\n      mail.smtp.ssl.auth: true\n      mail.smtp.ssl.enable: true\n      mail.smtp.ssl.required: true\nserver:\n  port: 8888\n复制代码"}, {"ctype": "p", "data": "说了点题外话，我们继续搞起~"}, {"ctype": "p", "data": "其实到这Erupt的环境就搭建完了，额~ ，这就完了？"}, {"ctype": "p", "data": "咱们什么也没干，项目是个空壳子，一行代码也没写，好像连个表也没建啊！"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f7a1c4361f24ccf875db124aeb5a60c~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "别着急咱们先启动下项目，看到控制台打印出很多建表语句和插入语句，这是因为Erupt框架底层应用JPA持久化，预置创建了一些系统表和数据。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4819476e6a79449fbd5396cbc0a43af0~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "注意：Erupt预置表只会随项目第一次启动构建一次，如果想重新创建，需删除.Erupt文件（一般在项目的工作空间内），获取文件位置方式"}, {"ctype": "code", "data": "System.getProperty(\"user.dir\")\n复制代码"}, {"ctype": "p", "data": "再看数据库里创建了16张系统表，其中e_upms_user表是用户表，默认只有一个管理员账号，用户名、密码都是erupt。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/accc8c0770c34865aeba1582cff561b2~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "紧接着我们访问http://127.0.0.1:8888/，看一下是个什么效果，竟然有个完整的登录页面。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef4dbc5a6b8442eb90f7c73f6bf94852~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "用上边的用户名、密码直接登录，erupt已经预先实现了完整的权限控等功能，而到这我们几乎是没写过什么代码的，都是框架封装好了的，菜单类数据全部从数据库动态获取，一个基础的后台管理系统就搭建完了，有点哇塞。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df615ec2ace04165bab7536b45b2fc9e~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "有趣的页面"}, {"ctype": "p", "data": "那么问题来了？想要自定义页面怎么办？"}, {"ctype": "p", "data": "开篇我们就说过erupt是零前端代码，全部基于Java注解开发的，接下来用Java注解写个简单页面体验下。"}, {"ctype": "p", "data": "erupt有两个核心注解@Erupt，@EruptField"}, {"ctype": "p", "data": "下边我们定义一个Student类，加上@Erupt，@EruptField注解，这样页面和元素就算写完了，是不是有点颠覆认知。"}, {"ctype": "code", "data": "/*\n *  @Erupt注解修饰在类上，@EruptField注解修饰在字段上\n *  其他注解均为Jpa注解\n */\n@Getter\n@Setter\n@Erupt(name = \"学生表\",\n        power = @Power(importable = true, export = true)\n)\n@Entity\n//@Table(name = \"t_student\")\npublic class Student extends BaseModel {\n\n    @EruptField(\n            views = @View(title = \"学生姓名\"),\n            edit = @Edit(title = \"学生姓名\", notNull = true, search = @Search(vague = true))\n    )\n    private String studentName;\n\n    @EruptField(\n            views = @View(title = \"所属班级\"),\n            edit = @Edit(title = \"所属班级\", notNull = true)\n    )\n    private String studentClass;\n\n    @EruptField(\n            views = @View(title = \"学生年龄\"),\n            edit = @Edit(title = \"学生年龄\", notNull = true)\n    )\n    private String studentAge;\n\n    @Lob\n    @EruptField(\n            views = @View(title = \"学生性别\"),\n            edit = @Edit(title = \"学生性别\", notNull = true)\n    )\n    private String studentSex;\n\n    @EruptField(\n            views = @View(title = \"考核状态\"),\n            edit = @Edit(title = \"考核状态\", notNull = true, boolType = @BoolType(trueText = \"通过\", falseText = \"挂科\"), search = @Search)\n    )\n    private Boolean status;\n}\n复制代码"}, {"ctype": "p", "data": "但此时新创建的页面不会显示出来，还需要我们手动做一个映射关系，在菜单维护中自定义个菜单，类型值一定要为新建的 类名 Student。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/844dab1b42324de2a52d6e610ec2083f~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "保存刷新后会看到我们的新页面出现了，而且页面的功能很完整，基础操作、查询、导入、导出功能都自动实现了。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1a4b7098d6ab45cfbc2bbbeb84d7f014~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "页面新增一个学生信息，对应的Student表也多了条记录，而这个持久化的过程完全由框架来做。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f52d510be994bdd955748eae0cf0a30~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "尽管Erupt 框架对前后端代码做了深度封装，但它提供了丰富灵活的自定义接口，来满足我们的个性化需求。"}, {"ctype": "p", "data": "比如我们在录入新学生信息时，希望屏蔽名字为张三的同学，可以对页面按钮功能做代理dataProxy，实现自定义的逻辑，对哪个按钮代理就实现对应方法即可，如beforeAdd、afterAdd是对新增按钮的代理。"}, {"ctype": "code", "data": "@Getter\n@Setter\n@Erupt(name = \"学生表\",dataProxy = {StudentDataProxy.class},\n        power = @Power(importable = true, export = true)\n)\n@Entity\n//@Table(name = \"t_student\")\npublic class Student extends BaseModel {\n\n}\npublic class StudentDataProxy implements DataProxy<Student> {\n\n    @Override\n    public void beforeAdd(Student student) {\n        //后台字段校验\n        if (\"张三\".equals(student.getStudentName())) {\n            throw new EruptApiErrorTip(\"名称禁止为张三！\");\n        }\n    }\n\n    @Override\n    public void afterAdd(Student student) {\n\n    }\n    @Override\n    public void afterUpdate(Student student) {\n\n    }\n\n    @Override\n    public void afterDelete(Student student) {\n    }\n }\n复制代码"}, {"ctype": "p", "data": "当我们在页面录入名字为张三的同学时，成功屏蔽。其他类似的功能还有很多，这里就不一一举例了，看文档看文档~"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1391bc3b61ef4b748c62e1b486e4009b~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "如果我们想要按传统的方式开发接口，不用担心会和Erupt的页面生成规则有冲突，丝毫不会受影响。而且Erupt内部集成了JPA，提供了现成的dao接口，只要调用对应API即可上手开发。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/562c52bfad514d87b37213836f1370bf~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "如果你不想手写Java代码也没关系，Erupt还提供了代码生成器，自定义Java类名和字段名，可以生成代码，直接copy就行了。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e6ac458afcdb4a7b8b6d8647fb285efe~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3c54a71dd41429984f787d6e957d400~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "说到这我只介绍了Erupt一丢丢的基础特性，主要是想让小伙伴知道有这么个敏捷利器。"}, {"ctype": "p", "data": "不仅如此它还支持丰富的数据类型，内置了像定时任务管理、多表联合查询、前后端分离部署、接口权限、操作记录、多数据源、邮件系统、黑白名单等等很多实用功能，都直接调用API就可以用。"}, {"ctype": "img", "data": "https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/909fed7993e24edbbb33f5e0e0684720~tplv-k3u1fbpfcp-zoom-1.image"}, {"ctype": "p", "data": "说在后边"}, {"ctype": "p", "data": "Erupt 框架的优点是显而易见的，快捷、高效、上手容易，对新手相当的友好，但在实际生产环境中我只是用它来做一些配置字典类的数据管理。"}, {"ctype": "p", "data": "因为它的深度封装虽然让开发变的简单高效，可对于业务相对复杂、高度定制的系统来说，Erupt 框架显得力不从心，更关键的一点，它的社区并不算特别活跃，毕竟是个小众框架。"}, {"ctype": "p", "data": "不过，技术从来都是服务于业务的，如果你的业务与Erupt的气质相匹配，别犹豫，用它！"}, {"ctype": "head", "data": ""}], "cate": "后端"}
